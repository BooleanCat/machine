---
- hosts: all
  tasks:
  - name: 'bash-it: clone'
    git:
      repo: https://github.com/Bash-it/bash-it.git
      dest: ~/.bash_it
    register: bashitclone
  - name: 'bash-it: install'
    command: ~/.bash_it/install.sh --silent
    when: bashitclone.changed
  - name: 'bash-it: theme'
    replace:
      path: ~/.bashrc
      regexp: "export BASH_IT_THEME='bobby'"
      backup: "yes"
      replace: "export BASH_IT_THEME='minimal'"

  - name: 'linuxbrew: install'
    apt:
      name: linuxbrew-wrapper
      update_cache: yes
    become: yes
  - name: 'linuxbrew: env vars'
    lineinfile:
      path: ~/.bashrc
      state: present
      line: 'export PATH="/home/linuxbrew/.linuxbrew/bin:${PATH}"'

  - name: 'atom: repository'
    apt_repository:
      repo: ppa:webupd8team/atom
    become: yes
  - name: 'atom: install'
    apt:
      name: atom
      update_cache: yes
    become: yes

  - name: golang
    homebrew:
      name: go
      state: latest
      update_homebrew: yes
  - name: 'golang: env vars'
    lineinfile:
      path: ~/.bashrc
      state: present
      line: 'export {{ item }}'
    with_items:
    - 'GOPATH="${HOME}/go"'
    - 'PATH="${PATH}:${GOPATH}/bin"'

  - name: 'rust: create tempdir'
    tempfile:
      state: directory
    register: rust_temp
  - name: 'rust: download rustup'
    get_url:
      url: "https://sh.rustup.rs"
      dest: "{{ rust_temp.path }}/rustup"
      mode: "0755"
      force: yes
  - name: 'rust: install rustup'
    command: "{{ rust_temp.path }}/rustup -y --no-modify-path"
  - name: 'rust: update rustup'
    command: "~/.cargo/bin/rustup update"
  - name: 'rust: install src'
    command: "~/.cargo/bin/rustup component add rust-src"
  - name: 'rust: env vars'
    lineinfile:
      path: ~/.bashrc
      state: present
      line: "export {{ item }}"
    with_items:
    - 'PATH="~/.cargo/bin:${PATH}"'
    - 'RUST_SRC_PATH="$( ~/.cargo/bin/rustc --print sysroot )/lib/rustlib/src/rust/src"'
  - name: 'rust: remove tempdir'
    file:
      path: "{{  rust_temp.path }}"
      state: absent

  - name: pyenv
    homebrew:
      name: "{{ item }}"
      state: latest
      update_homebrew: yes
    with_items:
    - pyenv
    - pyenv-virtualenv
  - name: 'pyenv: python build dependencies'
    apt:
      name: "{{ item }}"
      update_cache: yes
    become: yes
    with_items:
    - make
    - build-essential
    - libssl-dev
    - zlib1g-dev
    - libbz2-dev
    - libreadline-dev
    - libsqlite3-dev
    - wget
    - curl
    - llvm
    - libncurses5-dev
    - libncursesw5-dev
    - xz-utils
    - tk-dev

  - name: 'vim: clone config'
    git:
      repo: https://github.com/luan/vimfiles.git
      dest: ~/.vim
    register: vimclone
  - name: 'vim: install neovim'
    homebrew:
      name: neovim
      state: latest
      update_homebrew: yes
    register: vimneovim
  - name: 'vim: install neovim pip'
    pip:
      name: neovim
      state: latest
    register: vimpip
  - name: 'vim: plugins'
    file:
      src: "{{ ansible_env.PWD }}/config/.vimrc.local.plugins"
      path: ~/.vimrc.local.plugins
      state: link
      force: yes
    register: vimplugins
  - name: 'vim: configure'
    command: ~/.vim/update
    when: vimclone.changed or vimneovim.changed or vimpip.changed or vimplugins.changed
  - name: 'vim: editor'
    lineinfile:
      path: ~/.bashrc
      state: present
      line: 'export EDITOR=vim'

  - name: ripgrep
    homebrew:
      name: ripgrep
      state: latest
      update_homebrew: yes

  - name: direnv
    homebrew:
      name: direnv
      state: latest
      update_homebrew: true
  - name: 'direnv: setup'
    lineinfile:
      path: ~/.bashrc
      state: present
      line: 'eval "$(direnv hook bash)"'

  - name: hfsprogs
    apt:
      name: hfsprogs
      state: latest
    become: true

  - name: 'netflix: codecs'
    apt:
      name: libavcodec-extra
      state: latest
    become: true

  - name: tmux
    apt:
      name: tmux
      state: latest
      update_cache: yes
    become: true
  - name: 'tmux: config'
    file:
      src: "{{ ansible_env.PWD }}/config/.tmux.conf"
      path: ~/.tmux.conf
      state: link
      force: true
  - name: 'tmux: tpm'
    git:
      repo: https://github.com/tmux-plugins/tpm
      dest: ~/.tmux/plugins/tpm

  - name: 'git: config'
    file:
      path: ~/.gitconfig
      src: "{{ ansible_env.PWD }}/config/.gitconfig"
      state: link
      force: yes

  - name: 'scripts: update PATH'
    lineinfile:
      state: present
      path: ~/.bashrc
      line: 'export PATH="{{ ansible_env.PWD }}/bin:${PATH}"'

  - name: aliases
    lineinfile:
      path: ~/.bashrc
      state: present
      line: 'alias bosh-lite-env="source ~/.bosh-lite/bosh-env"'
