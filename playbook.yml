---
- hosts: all
  tasks:
  - name: 'bash-it: clone'
    git:
      repo: https://github.com/Bash-it/bash-it.git
      dest: ~/.bash_it
    register: bashitclone
  - name: 'bash-it: install'
    command: ~/.bash_it/install.sh --silent
    when: bashitclone.changed
  - name: 'bash-it: theme'
    replace:
      path: ~/.bashrc
      regexp: "export BASH_IT_THEME='bobby'"
      backup: "yes"
      replace: "export BASH_IT_THEME='minimal'"

  - name: 'atom: repository'
    apt_repository:
      repo: ppa:webupd8team/atom
    become: yes
  - name: 'atom: install'
    apt:
      name: atom
      update_cache: yes
    become: yes

  - name: 'go: env'
    lineinfile:
      path: ~/.bashrc
      state: present
      line: 'export {{ item }}'
    with_items:
    - 'GOPATH="${HOME}/go"'
    - 'PATH="${PATH}:${GOPATH}/bin:/usr/local/go/bin"'
  - name: 'go: check'
    shell: 'if command -v /usr/local/go/bin/go; then /usr/local/go/bin/go version; fi'
    register: go_version
    changed_when: go_version.stdout == ''
  - name: 'go: remove'
    file:
      path: /usr/local/go
      state: absent
    become: yes
    when: go_version.changed
  - name: 'go: download'
    get_url:
      url: 'https://dl.google.com/go/go1.11.linux-amd64.tar.gz'
      dest: '~/Downloads/go1.11.linux-amd64.tar.gz'
    when: go_version.changed
  - name: 'go: install'
    unarchive:
      src: '~/Downloads/go1.11.linux-amd64.tar.gz'
      dest: '/usr/local'
    when: go_version.changed
    become: yes
  - name: 'go: remove download'
    file:
      path: '~/Downloads/go1.11.linux-amd64.tar.gz'
      state: absent

  - name: haskell
    apt:
      name: haskell-platform
      update_cache: yes
    become: yes
  - name: 'haskell: stack'
    apt:
      name: haskell-stack
      update_cache: yes
    become: yes

  - name: 'rust: env'
    lineinfile:
      path: ~/.bashrc
      state: present
      line: "export {{ item }}"
    with_items:
    - 'PATH="~/.cargo/bin:${PATH}"'
    - 'RUST_SRC_PATH="$( ~/.cargo/bin/rustc --print sysroot )/lib/rustlib/src/rust/src"'
  - name: 'rust: check rustup'
    shell: 'if command -v ~/.cargo/bin/rustup; then ~/.cargo/bin/rustup -V; fi'
    register: rustup_version
    changed_when: "'rustup' not in rustup_version.stdout"
  - name: 'rust: download rustup'
    get_url:
      url: "https://sh.rustup.rs"
      dest: "~/Downloads/rustup"
      mode: "0755"
      force: yes
    when: rustup_version.changed
  - name: 'rust: install rustup'
    command: "~/Downloads/rustup -y --no-modify-path"
    when: rustup_version.changed
  - name: 'rust: remove rustup download'
    file:
      path: '~/Downloads/rustup'
      state: absent
  - name: 'rust: update'
    command: "~/.cargo/bin/rustup update"
    register: rustup_update
    changed_when: "'unchanged' not in rustup_update.stdout"

  - name: 'python: env'
    lineinfile:
      path: ~/.bashrc
      state: present
      line: '{{ item }}'
    with_items:
    - 'export PYENV_ROOT="$HOME/.pyenv"'
    - 'export PATH="$PYENV_ROOT/bin:$PATH"'
    - 'if command -v pyenv 1>/dev/null 2>&1; then eval "$(pyenv init -)"; fi'
    - 'eval "$(pyenv virtualenv-init -)"'
  - name: 'python: build dependencies'
    apt:
      name: "{{ item }}"
      update_cache: yes
    become: yes
    with_items:
    - make
    - build-essential
    - libssl-dev
    - zlib1g-dev
    - libbz2-dev
    - libreadline-dev
    - libsqlite3-dev
    - wget
    - curl
    - llvm
    - libncurses5-dev
    - libncursesw5-dev
    - xz-utils
    - tk-dev
  - name: 'python: pyenv'
    git:
      repo: https://github.com/pyenv/pyenv.git
      dest: ~/.pyenv
  - name: 'python: pyenv virtualenv'
    git:
      repo: https://github.com/pyenv/pyenv-virtualenv.git
      dest: ~/.pyenv/plugins/pyenv-virtualenv

  - name: 'vim: config'
    git:
      repo: https://github.com/luan/vimfiles.git
      dest: ~/.vim
    register: vim_config
  - name: 'vim: neovim repository'
    apt_repository:
      repo: ppa:neovim-ppa/stable
    become: yes
  - name: 'vim: neovim'
    apt:
      name: neovim
      update_cache: yes
    become: yes
  - name: 'vim: plugins'
    file:
      src: "{{ ansible_env.PWD }}/config/.vimrc.local.plugins"
      path: ~/.vimrc.local.plugins
      state: link
      force: yes
  - name: 'vim: editor'
    lineinfile:
      path: ~/.bashrc
      state: present
      line: 'export EDITOR=vim'
  - name: 'vim: configure'
    command: ~/.vim/update
    when: vim_config.changed

  - name: 'ripgrep: check'
    shell: 'if command -v rg; then rg -V || true; fi'
    register: ripgrep_check
    changed_when: "'0.9.0' not in ripgrep_check.stdout"
  - name: 'ripgrep: download'
    get_url:
      url: 'https://github.com/BurntSushi/ripgrep/releases/download/0.9.0/ripgrep_0.9.0_amd64.deb'
      dest: '/tmp/ripgrep_0.9.0_amd64.deb'
      force: yes
    when: ripgrep_check.changed
  - name: 'ripgrep'
    shell: 'dpkg -i /tmp/ripgrep_0.9.0_amd64.deb'
    become: yes
    when: ripgrep_check.changed
  - name: 'ripgrep: cleanup'
    file:
      path: '/tmp/ripgrep_0.9.0_amd64.deb'
      state: absent

  - name: direnv
    apt:
      name: direnv
      state: latest
      update_cache: yes
    become: true

  - name: hfsprogs
    apt:
      name: hfsprogs
      state: latest
    become: true

  - name: 'netflix: codecs'
    apt:
      name: libavcodec-extra
      state: latest
      update_cache: yes
    become: true

  - name: tmux
    apt:
      name: tmux
      state: latest
      update_cache: yes
    become: true
  - name: 'tmux: config'
    file:
      src: "{{ ansible_env.PWD }}/config/.tmux.conf"
      path: ~/.tmux.conf
      state: link
      force: true
  - name: 'tmux: tpm'
    git:
      repo: https://github.com/tmux-plugins/tpm
      dest: ~/.tmux/plugins/tpm

  - name: 'git: config'
    file:
      path: ~/.gitconfig
      src: "{{ ansible_env.PWD }}/config/.gitconfig"
      state: link
      force: yes

  - name: 'scripts: update PATH'
    lineinfile:
      state: present
      path: ~/.bashrc
      line: 'export PATH="{{ ansible_env.PWD }}/bin:${PATH}"'

  - name: aliases
    lineinfile:
      path: ~/.bashrc
      state: present
      line: 'alias bosh-lite-env="source ~/.bosh-lite/bosh-env"'
